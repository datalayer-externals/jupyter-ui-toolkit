name: toolkit-ci

on: pull_request

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2

      - name: Setup Node 💾
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install Dependencies 📥
        run: yarn install

      - name: Run Tests 🧪
        run: yarn run test
        working-directory: packages/components

  visual-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2

      - name: Setup Node 💾
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install Dependencies 📥
        run: yarn install

      - name: Install Playwright Browsers
        run: yarn run playwright install --with-deps
        working-directory: packages/components

      - name: Run Visual Tests 🧪
        run: yarn run test:visual
        working-directory: packages/components

      - name: Update Snapshots
        if: ${{ failure() }}
        run: |
          mv test-results test-assets
          yarn run test:visual -u
        working-directory: packages/components

      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: jupyter-ui-test
          path: |
            packages/components/test-assets/
            packages/components/src/**/*-snapshots/*

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2

      - name: Setup Node 💾
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install Dependencies 📥
        run: yarn install

      - name: Run Lint Check 🔍
        run: yarn run lint:check

      - name: Run Format Check 🌸
        run: yarn run format:check

  build-toolkit:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2

      - name: Setup Node 💾
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install Dependencies 📥
        run: yarn install

      - name: Build Toolkit 🏗
        run: yarn run lerna run --scope @jupyter-notebook/web-components --scope @jupyter-notebook/react-components build

  build-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2

      - name: Setup Node 💾
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install Dependencies 📥
        run: yarn install

      - name: Build Docs 🏗
        run: yarn run build:docs
        working-directory: packages/components
